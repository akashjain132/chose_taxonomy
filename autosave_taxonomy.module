<?php

/**
 * @file
 * Ajaxified widget of taxonomy term reference field in edit form.
 */

define('AUTOSAVE_TAXONOMY','autosave_taxonomy');

/**
 * Implements hook_permission().
 */
function autosave_taxonomy_tracking_permission() {

  return array(
    'Autosave Taxonomy Configuration' => array(
      'title' => t('Autosave Taxonomy Configuration'),
      'description' => t('Warning: Give to trusted roles only; this permission has security implications.'),
    ),
  );

}

/**
 * Implements hook_menu.
 */
function autosave_taxonomy_menu() {

  $items['admin/config/user-interface/autosave_taxonomy'] = array(
    'title' => 'Autosave taxonomy',
    'description' => 'Will make taxonomy term field ajaxified in edit form.',
    'page callback' => 'drupal_get_form',
    'file' => 'autosave_taxonomy.admin.inc',
    'page arguments' => array('autosave_taxonomy_configuration_page'),
    'access arguments' => array('Autosave Taxonomy Configuration'),
  );

  return $items;
}

/*
 * Implements hook_form_FORM_ID_alter.
 */
function autosave_taxonomy_form_field_ui_field_edit_form_alter(&$form, &$form_state) {

  if ($form['#field']['type'] == 'taxonomy_term_reference') {

    // Load file which include ajax callback definition.
    module_load_include('inc', 'autosave_taxonomy', 'autosave_taxonomy.admin');

    // Load file which include form submit definition.
    module_load_include('inc', 'autosave_taxonomy', 'autosave_taxonomy.pages');

    $required_field_weight = $form['instance']['required']['#weight'];
    $autosave_taxonomy_config_field_name = get_autosave_taxonomy_terms();
    $current_field_name = $form['#field']['field_name'];
    $autosave_taxonomy_field = in_array($current_field_name, $autosave_taxonomy_config_field_name) ? 1 : 0;
    $form['instance']['autosave_taxonomy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Autosave taxonomy'),
      '#default_value' => $autosave_taxonomy_field,
      '#description' => t('Check if you want this element ajaxified in edit form with icon such that user like or unlike something'),
      '#weight' => $required_field_weight + 1,
    );
   $form['#submit'][] = 'autosave_taxonomy_save_field_name';
  }
}

/**
 * Implements hook_form_alter.
 */
function autosave_taxonomy_form_alter(&$form, &$form_state, $form_id) {

  // Load file which include ajax callback definiation.
  module_load_include('inc', 'autosave_taxonomy', 'autosave_taxonomy.admin');

  // Get all field machine name
  $autosave_taxonomy_config_field_name = get_autosave_taxonomy_terms();
  $autosave_taxonomy_field_name = array();

  // check variable have any field name or not.
  if (empty($autosave_taxonomy_config_field_name)) {
    return;
  }

  $autosave_taxonomy_field_name = array();
  foreach ($autosave_taxonomy_config_field_name as $key => $field_name) {
    if (isset($form[$field_name])) {
      $autosave_taxonomy_field_name[] = $field_name;
    }
  }

  // if user have not created any entity then autosave taxonomy is not work.
  if ((isset($form['#user']->uid) && empty($form['#user']->uid)) || (isset($form['#node']->nid) && empty($form['#node']->nid))) {
    return;
  }

  $autosave_taxonomy_path = drupal_get_path('module', AUTOSAVE_TAXONOMY);
  drupal_add_js($autosave_taxonomy_path . '/js/autosave_taxonomy.js', 'file');
  drupal_add_css($autosave_taxonomy_path . '/css/autosave_taxonomy.css', 'file');

  $form_state['storage']['autosave_taxonomy'] = $autosave_taxonomy_field_name;
  foreach ($autosave_taxonomy_field_name as $key => $field_machine_name) {

    // if form has no autosave taxonomy field.
    if (!isset($form[$field_machine_name])) {
      return;
    }

    // Load file which include ajax callback definiation.
    module_load_include('inc', 'autosave_taxonomy', 'autosave_taxonomy.pages');

    $form[$field_machine_name]['#attributes'] = array('class' => array('field-widget-autosave-taxonomy'));

    $form[$field_machine_name]['und']['#ajax'] = array(
      'callback' => 'autosave_taxonomy_save_taxonomy_term_by_ajax',
      'method' => 'replace',
      'effect' => 'fade',
    );

  }

  $clicked_image   = variable_get(AUTOSAVE_TAXONOMY . '_type_image_clicked', '');
  $unclicked_image = variable_get(AUTOSAVE_TAXONOMY . '_type_image_unclicked', '');

  $clicked_image   = file_load($clicked_image);
  $unclicked_image = file_load($unclicked_image);

  // If user select its custom icon then show that icons otherwise default icon will be seen.
  if (!(empty($clicked_image->uri) || empty($unclicked_image))) {
    $clicked_image   = $clicked_image->uri;
    $clicked_image   = file_create_url($clicked_image);
    $clicked_image   = parse_url($clicked_image);
    $clicked_image   = trim($clicked_image['path'],'/');
    $unclicked_image = $unclicked_image->uri;
    $unclicked_image = file_create_url($unclicked_image);
    $unclicked_image = parse_url($unclicked_image);
    $unclicked_image = trim($unclicked_image['path'],'/');
  }
  else {
    $default_image   = variable_get(AUTOSAVE_TAXONOMY . '_image_option', '');
    $default_image  .= ".png";
    $clicked_image   = "positive-" . $default_image;
    $unclicked_image = "negative-" . $default_image;
    $clicked_image   = $autosave_taxonomy_path . '/images/' . $clicked_image;
    $unclicked_image = $autosave_taxonomy_path . '/images/' . $unclicked_image;
  }

  // Pass image name in javascript variable
  drupal_add_js(array(AUTOSAVE_TAXONOMY => array('cliked_image' => $clicked_image, 'uncliked_image' => $unclicked_image)), array('type' => 'setting'));
}
